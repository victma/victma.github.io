{"version":3,"sources":["webpack:///./src/components/calendar/calendarLine.js","webpack:///./src/components/calendar/calendar.js","webpack:///./src/pages/fruits.js"],"names":["Line","borderRadius","cursor","fontWeight","transition","animation","default","position","overflow","textAlign","props","gridColumnStart","colStart","gridColumnEnd","colEnd","gridRow","row","border","highlighted","colors","logoGreen","color","background","text","Background","top","bottom","left","right","zIndex","opacity","show","BackgroundImage","Img","CalendarLinePart","start","end","onMouseEnter","onHover","onMouseLeave","name","undefined","fluid","childImageSharp","CalendarLine","month","currentMonth","Date","getMonth","Container","Month","lightBrown","padding","gridColumn","column","backgroundColor","Calendar","onHoverMonth","monthId","hoverIn","setState","selectedMonth","selectedPart","onHoverPart","partId","state","monthShouldBeHighLighted","this","parts","partContainsMonth","partShouldBeHighlighted","partStart","partEnd","render","map","m","i","key","part","images","find","toLowerCase","replace","Component","query","FruitsCalendarPage","data","fullHeight","title","mapsJson","allFile","nodes"],"mappings":"0QAKMA,EAAO,uCAAW,CACtBC,aAAc,EACdC,OAAQ,UACRC,WAAY,IACZC,WAAYC,IAAUD,WAAWE,QACjCC,SAAU,WACVC,SAAU,SAEV,EAAK,CACHC,UAAW,YAEZ,SAAAC,GAAK,MAAK,CACXC,gBAAiBD,EAAME,SACvBC,cAAeH,EAAMI,OAAS,EAC9BC,QAAYL,EAAMM,IAAX,YACPC,OAAO,cAAcP,EAAMQ,YAAc,cAAgBC,IAAOC,WAChEC,MAAOX,EAAMQ,YAAcC,IAAOG,WAAaH,IAAOI,SAGlDC,EAAa,uCAAW,CAC5BjB,SAAU,WACVkB,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTzB,WAAYC,IAAUD,WAAWE,UAChC,SAAAI,GAAK,MAAK,CACXoB,QAASpB,EAAMqB,KAAO,EAAI,MAGtBC,EAAkB,YAAOC,IAAP,uEAKxB,SAASC,EAAiBxB,GACxB,OACE,YAACV,EAAD,CACEgB,IAAKN,EAAMM,IACXJ,SAAUF,EAAMyB,MAChBrB,OAAQJ,EAAM0B,IACdlB,YAAaR,EAAMQ,YACnBmB,aAAc,kBAAM3B,EAAM4B,SAAQ,IAClCC,aAAc,kBAAM7B,EAAM4B,SAAQ,KAElC,qBAAI5B,EAAM8B,WACYC,IAArB/B,EAAMY,YACL,YAACE,EAAD,CAAYO,KAAMrB,EAAMQ,aACtB,YAACc,EAAD,CACEU,MAAOhC,EAAMY,WAAWqB,gBAAgBD,UA6BrCE,MArBf,SAAsBlC,GACpB,OAAIA,EAAMyB,OAASzB,EAAM0B,IAErB,YAACF,EAAqBxB,GAInB,8BACL,YAACwB,EAAD,eACMxB,EADN,CAEEyB,MAAOzB,EAAMyB,MACbC,IAAK,MAEP,YAACF,EAAD,eACMxB,EADN,CAEEyB,MAAO,EACPC,IAAK1B,EAAM0B,SC1EXS,EAAQ,CAAC,UAAW,UAAW,OAAQ,QAAS,MAAO,OAAQ,UAAW,OAAQ,YAAa,UAAW,WAAY,YACtHC,GAAgB,IAAIC,MAAQC,WAE5BC,EAAY,8KASZC,EAAQ,uCAAW,CACvBjC,OAAO,aAAcE,IAAOgC,WAC5BlD,aAAc,EACdmD,QAAS,EACT3C,UAAW,SACXP,OAAQ,UACRa,QAAS,YACTX,WAAYC,IAAUD,WAAWE,UAChC,SAAAI,GAAK,MAAK,CACX2C,WAAe3C,EAAM4C,OAAX,YACVC,gBAAiB7C,EAAMQ,YAAcC,IAAOgC,WAAa,kBA+E5CK,E,YA3Eb,WAAY9C,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAOF+C,aAAe,SAACC,EAASC,GACvB,EAAKC,SAAS,CACZC,cAAeF,EAAUD,EAAUZ,EACnCgB,aAAc,QAXC,EAenBC,YAAc,SAACC,EAAQL,GACrB,EAAKC,SAAS,CACZE,aAAcH,EAAUK,EAAS,KACjCH,cAAeF,EAAU,KAAOb,KAhBlC,EAAKmB,MAAQ,CACXJ,cAAef,EACfgB,aAAc,MAJC,E,4CAsBnBI,yBAAA,SAAyBrB,GACvB,GAAiC,OAA7BsB,KAAKF,MAAMJ,cACb,OAAOhB,IAAUsB,KAAKF,MAAMJ,cAE9B,IAAMC,EAAeK,KAAKzD,MAAM0D,MAAMD,KAAKF,MAAMH,cAEjD,OAAOK,KAAKE,kBAAkBP,EAAa3B,MAAO2B,EAAa1B,IAAKS,EAAQ,I,EAG9EyB,wBAAA,SAAwBN,GACtB,GAAgC,OAA5BG,KAAKF,MAAMH,aACb,OAAOE,IAAWG,KAAKF,MAAMH,aAE/B,IAAMA,EAAeK,KAAKzD,MAAM0D,MAAMJ,GAEtC,OAAOG,KAAKE,kBAAkBP,EAAa3B,MAAO2B,EAAa1B,IAAK+B,KAAKF,MAAMJ,cAAgB,I,EAGjGQ,kBAAA,SAAkBE,EAAWC,EAAS3B,GACpC,OAAI0B,GAAaC,EACRD,GAAa1B,GAASA,GAAS2B,EAGjCD,GAAa1B,GAASA,GAAS2B,G,EAGxCC,OAAA,WAAU,IAAD,OACP,OACE,YAACxB,EAAD,KACCJ,EAAM6B,KAAI,SAACC,EAAGC,GAAJ,OACT,YAAC1B,EAAD,CACE2B,IAAKD,EACLtB,OAAQsB,EAAI,EACZ1D,YAAa,EAAKgD,yBAAyBU,GAC3CvC,aAAc,kBAAM,EAAKoB,aAAamB,GAAG,IACzCrC,aAAc,kBAAM,EAAKkB,aAAamB,GAAG,KACzCD,MAEHR,KAAKzD,MAAM0D,MAAMM,KAAI,SAACI,EAAMF,GAAP,OACpB,YAAC,EAAD,eACME,EADN,CAEED,IAAKD,EACL5D,IAAK,EAAI4D,EACT1D,YAAa,EAAKoD,wBAAwBM,GAC1CtC,QAAS,SAAAqB,GAAO,OAAI,EAAKI,YAAYa,EAAGjB,IACxCrC,WAAY,EAAKZ,MAAMqE,OAAOC,MAAK,SAAAJ,GAAC,OAAKA,EAAEpC,OAASsC,EAAKtC,KAAKyC,cAAcC,QAAQ,QAAS,gB,GApEhFC,aCdVC,GAFEC,UAPY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACzB,YAAC,IAAD,CAAQC,YAAU,GAChB,YAAC,IAAD,CAAKC,MAAM,WACX,YAAC,EAAD,CAAUpB,MAAOkB,EAAKG,SAASrB,MAAOW,OAAQO,EAAKI,QAAQC,UAM7C","file":"component---src-pages-fruits-js-e1afd7a5cd0b0219db71.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport Img from 'gatsby-image';\nimport { colors, animation } from '../constants';\n\nconst Line = styled.div({\n  borderRadius: 8,\n  cursor: 'pointer',\n  fontWeight: 500,\n  transition: animation.transition.default,\n  position: 'relative',\n  overflow: 'hidden',\n\n  'p': {\n    textAlign: 'center',\n  }\n}, props => ({\n  gridColumnStart: props.colStart,\n  gridColumnEnd: props.colEnd + 1,\n  gridRow: `${props.row} / span 1`,\n  border: `2px solid ${props.highlighted ? 'transparent' : colors.logoGreen}`,\n  color: props.highlighted ? colors.background : colors.text,\n}))\n\nconst Background = styled.div({\n  position: 'absolute',\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  zIndex: -1,\n  transition: animation.transition.default,\n}, props => ({\n  opacity: props.show ? 1 : 0,\n}));\n\nconst BackgroundImage = styled(Img)({\n  width: '100%',\n  height: '100%',\n});\n\nfunction CalendarLinePart(props) {\n  return (\n    <Line\n      row={props.row}\n      colStart={props.start}\n      colEnd={props.end}\n      highlighted={props.highlighted}\n      onMouseEnter={() => props.onHover(true)}\n      onMouseLeave={() => props.onHover(false)}\n    >\n      <p>{props.name}</p>\n      {props.background !== undefined &&\n        <Background show={props.highlighted}>\n          <BackgroundImage\n            fluid={props.background.childImageSharp.fluid}\n          />\n        </Background>\n      }\n    </Line>\n  )\n}\n\nfunction CalendarLine(props) {\n  if (props.start <= props.end) {\n    return (\n      <CalendarLinePart {...props} />\n    );\n  }\n\n  return <>\n    <CalendarLinePart\n      {...props}\n      start={props.start}\n      end={12}\n    />\n    <CalendarLinePart\n      {...props}\n      start={1}\n      end={props.end}\n    />\n  </>\n}\n\nexport default CalendarLine;","import React, { Component } from 'react';\nimport CalendarLine from './calendarLine';\nimport styled from '@emotion/styled';\nimport { colors, animation } from '../constants';\n\nconst month = [\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juillet\", \"Août\", \"Septembre\", \"Octobre\", \"Novembre\", \"Décembre\"];\nconst currentMonth = (new Date()).getMonth();\n\nconst Container = styled.div({\n  margin: 16,\n  display: 'grid',\n  gridTemplateColumns: 'repeat(12, 1fr)',\n  rowGap: 8,\n  columnGap: 8,\n  overflowX: 'scroll',\n})\n\nconst Month = styled.div({\n  border: `2px solid ${colors.lightBrown}`,\n  borderRadius: 4,\n  padding: 4,\n  textAlign: 'center',\n  cursor: 'pointer',\n  gridRow: '1 /span 1',\n  transition: animation.transition.default,\n}, props => ({\n  gridColumn: `${props.column} / span 1`,\n  backgroundColor: props.highlighted ? colors.lightBrown : 'transparent',\n}))\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedMonth: currentMonth,\n      selectedPart: null,\n    };\n  }\n\n  onHoverMonth = (monthId, hoverIn) => {\n    this.setState({\n      selectedMonth: hoverIn ? monthId : currentMonth,\n      selectedPart: null,\n    });\n  }\n\n  onHoverPart = (partId, hoverIn) => {\n    this.setState({\n      selectedPart: hoverIn ? partId : null,\n      selectedMonth: hoverIn ? null : currentMonth,\n    })\n  }\n\n  monthShouldBeHighLighted(month) {\n    if (this.state.selectedMonth !== null) {\n      return month === this.state.selectedMonth;\n    }\n    const selectedPart = this.props.parts[this.state.selectedPart];\n\n    return this.partContainsMonth(selectedPart.start, selectedPart.end, month + 1)\n  }\n\n  partShouldBeHighlighted(partId) {\n    if (this.state.selectedPart !== null) {\n      return partId === this.state.selectedPart;\n    }\n    const selectedPart = this.props.parts[partId];\n\n    return this.partContainsMonth(selectedPart.start, selectedPart.end, this.state.selectedMonth + 1);\n  }\n\n  partContainsMonth(partStart, partEnd, month) {\n    if (partStart <= partEnd) {\n      return partStart <= month && month <= partEnd;\n    }\n\n    return partStart <= month || month <= partEnd;\n  }\n\n  render() {\n    return (\n      <Container>\n      {month.map((m, i) => (\n        <Month\n          key={i}\n          column={i + 1}\n          highlighted={this.monthShouldBeHighLighted(i)}\n          onMouseEnter={() => this.onHoverMonth(i, true)}\n          onMouseLeave={() => this.onHoverMonth(i, false)}\n        >{m}</Month>\n      ))}\n      {this.props.parts.map((part, i) => (\n        <CalendarLine \n          {...part}\n          key={i}\n          row={2 + i}\n          highlighted={this.partShouldBeHighlighted(i)}\n          onHover={hoverIn => this.onHoverPart(i, hoverIn)}\n          background={this.props.images.find(i => (i.name === part.name.toLowerCase().replace(/é|è|ê/, 'e')))}\n        />\n      ))}\n    </Container>\n    );\n  }\n}\n\nexport default Calendar;\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layouts/layout\"\nimport SEO from \"../components/layouts/seo\"\nimport Calendar from \"../components/calendar/calendar\"\n\nconst FruitsCalendarPage = ({ data }) => (\n  <Layout fullHeight>\n    <SEO title=\"Fruits\" />\n    <Calendar parts={data.mapsJson.parts} images={data.allFile.nodes}/>\n  </Layout>\n)\n\nexport default FruitsCalendarPage\n\nexport const query = graphql`\n  {\n    mapsJson(map: {eq: \"fruits\"}, country: {eq: \"fr\"}) {\n      parts {\n        name\n        start\n        end\n      }\n    }\n    allFile(filter: {relativePath: {regex: \"/^images/fruits/[a-z]+.jpg$/\"}}) {\n      nodes {\n        childImageSharp {\n          fluid {\n            ...GatsbyImageSharpFluid_noBase64\n          }\n        }\n        name\n      }\n    }\n  }\n`\n"],"sourceRoot":""}